Description of abcm2ps (version 1.3.8)
======================================

abcm2ps is a divergence of abc2ps version 1.2.5. The changes are described
in the file New.Features. This file has been modified as little as
possible, so, replace abc2ps by abcm2ps in the following description.

Overview
========

Program abcm2ps reads an input file containing music in abc format
and typesets it directly in PostScript.

For a description of the abc syntax, please see the abc userguide 
which is a part of the abc2mtex package written by Chris Walshaw.

----- Files -----

README		abcm2ps overview
ReadMe.abc2ps	this file
License		GNU general public license 
Changes		history of changes to the program
Makefile	Unix Makefile
New.Features	description of new features
abc.txt		ABC music notation system by Chris Walshaw
layout.txt	information about the music layout
abc2ps.c	main program
abcparser.c	ABC generic parser
abcparse.h	definitions for the ABC parser
buffer.c	routines to control the output buffer
deco.c		routines to draw the decorations
format.c	routines for output formatting
syms.c		routines to define postscript macros
subs.c		general routines
util.c		more general routines
parse.c		routines to parse input lines
music.c		routines to typeset music 
style.h		link to a style file (defaults to style.std)
style.pure	alternative style file for "puristic" layout
style.std	parameters for music layout (standard)
<others>.abc	sample input and test files


----- Installation -----

To generate abcm2ps, you need an ANSI compliant C compiler and a 'make'
program. In this directory, to build the program, type:

	make

and then move it in one of the directories of your PATH.

To test the program, unleash it on file sample.abc like this:

   ./abcm2ps sample

The result can be inspected by using a PostScript previewer such as
ghostview on the output file Out.ps.


Possible problems:

By default, the generated PostScript is level 2 since it uses
the operator "selectfont". If you want level 1 output instead, set 
macro PS_LEVEL to 1 in abc2ps.h.

On Win32, untaring the distribution does not create a valid 'style.h' file.
On such a system, you must copy 'style.std' to 'style.h' before compiling.

----- Program structure -----

The program defines a number of PostScript macros for drawing
elementary components like note heads, stems, flags, bars, 
rests etc. These definitions are written to the output
file Out.ps first. The symbols are mostly defined using Bezier
curves. At some stage, the macros should probably be changed 
to user paths for more efficiency. 

The input lines are read and interpreted one at a time.
The processing of the info fields is straightforward.

The main work is done for lines of music. Such a line is parsed
into a list of symbols. To position the symbols horizontally along 
the staff, the program uses a method adapted from the "glue" used
Donald E. Knuth in the TeX program. The algorithm calculates
three separate sets of spacings:

  "shrink":   put the symbols as close together as is acceptable;
  "space":    space the symbols "naturally", whereby the space
              behind a note reflects its length;
  "stretch":  make a similar but stretched layout which still looks good.

To fill the staff, the spacings are interpolated between the "shrink" 
and "space" cases (if the sum of the natural spacings is larger than 
the staff length) or between the "space" and "stretch" cases (if the 
sum of the natural spacings is too short).

After the positions of all symbols are decided, lines are written to 
Out.ps to invoke the previously defined PostScript macros with 
suitable parameters.

File "layout.txt" gives information on the positioning and how to 
modify the layout.


----- Page breaking -----

Page breaking: version 1.2 avoids splitting a tune over pages
as much as possible. For each tune, the program checks whether 
the remaining space on the page is large enough to fit it in.
If not, a page break is put in before the tune.

To do this, the Postscript output is accumulated in a buffer first.
For really large tunes, the buffer might overflow. In that case,
the output is just written out without attempting to place the
page breaks cleverly.


----- Line breaking -----

The best output is usually obtained if the staff breaks are
chosen explicitly by suitable line breaks in the input file.
In this standard usage, the program tries to set the music as well 
as possible for each line separately. The symbols '*' and '**' at 
the end of a line are ignored, as well as the field 'E:' for
the elementary length.

However, if a line is too long to fit onto one staff, the overhang 
is spilled onto the next staff in this version. This makes it possible 
to get reasonable output even when the input is one long logical line. 
In practice, this is equivalent to automatic line breaking. 

To control line breaking, the following flags are available:

 -b    break at all line ends, even if they end with the
       continuation symbol '\'.

 -c    consider the input as one long line, ie., implicitly append 
       the continuation symbol '\' to every line of music.
      
 -B n  try to typeset with n bars on each line.

 -a x  set the maximal amount of permitted shrinking to x,
       where x lies between 0 and 1.

If none of these is specified, the standard line-by-line procedure
is followed, ie:
 
   abc2ps infile

For completely automatic line breaking, use the command

   abc2ps infile -c

This should produce reasonable staff breaks in most cases. However, 
repeat bars, 1st and 2nd endings, and slurs might not be positioned 
very nicely.

When doing automatic line breaking with -c, the user can control the 
spacing of the symbols along the staff by specifying the "compression 
parameter" alfa with the -a flag.  A value of 0.0 means that no 
shrinking is allowed, and a value of 1.0 allows shrinking until 
the symbols are almost touching. When -c is used, by default alfa 
is set to an intermediate value (displayed with 'abc2ps -c -h'). 
When -c is not used, maximal shrinking and stretching are allowed.

Thus, to really squeeze everything as much as possible, that is,
to get automatic line breaking together with maximal shrinking, use

   abc2ps infile -c -a1

For more stretched output, use (for example)

   abc2ps infile -c -a 0.2


The flag "-B n" formats with n bars on each line. This is useful 
e.g. to try various spacings before deciding on how to set the
linebreaks explicitly in the file. 

Abc2ps 1.2 tries to take care of slurs and 1st & 2nd endings at the 
line breaks. But in general, a tune will look a substantially better 
when the breaks are chosen by hand.


----- General usage -----

Basically, the usage is:   

   abc2ps file1 file2.. 

where file1, file2.. are the abc input files. This will generate
Postscript output.

Most flags (see below) can be used in any sequence.

Flags can be contracted together if the meaning is clear, 
and a numerical argument for the last flag can be appended.
That is,  '-b -s 0.7 -v 1' can be contracted to '-bs0.7 -v1'.


----- Tune selection -----
      
To select specific tunes from the files, use:

   abcm2ps file1 -e selector1 file2 -e selector2 ...

Each selector applies to the previous associated ABC file. It contains a
comma separated list of tunes. A tune item may be a single index value
(as indicated in the 'X:' field), or a range of such values. A range is
indicated as <first_index>-<last_index>. The last index may be omitted
meaning 'end of file'.

Example:
	abcm2ps voices -e 5,2-4 newfeatures -e5-

Note: Filtering may raise problems, mainly on global definitions.


----- Making Postscript output -----

To typeset all tunes in file "book1.abc":

      abc2ps book1

By default, all selected tunes are written into the same file, 
with suitable page breaks added. By using the flag -E, EPSF output
is made. Each tune is then put into a separate file with a correct
bounding box and no page breaks. 

Flag -O determines where the output goes. The argument to -O can be
either a file name or the '=' sign. The latter case tells abc2ps
to choose the name by itself.

For the PS and EPS modes, the output file names are:

PS mode:
   default        Out.ps
   -O NAME        NAME.ps
   -O =           Output for "foo.abc" is written to "foo.ps"

EPSF:
   default        Outnnn.eps, where nnn is a running index
   -O NAME        NAMEnnn.eps      
   -O =           Outfile name is <tune_title>.eps

Note: an output file is overwritten if it already exists.
This will happen if two tunes have the same name and flag "-O =" 
is used for EPSF output.


----- Setting the language encoding -----

For non-english languages, abcm2ps accepts the ISO Latin encoding from
1 to 6. By default, it assumes ASCII characters and implicit ISO Latin 1.
Explicit ISO Latin1 1 and other encodings may be specified either:

	- at command line level, with the argument '-Ln', where
	  'n' is the latin encoding number,

	- in a format file, using the 'encoding' parameter,

	- within a tune, using the pseudo-comment '%%encoding'
	  (note: this one must appear at the beginning of the ABC file,
	  and only one is taken into account).


----- Modifying the output  -----

These flags change the output appearance:
   
   -x	   includes the xref numbers in the tune title.

   -1	   writes every tune on a separate page.

   -n	   includes historical notes and other stuff at the bottom 
	   of each tune.

   -p	   generates pretty output, with more whitespace between tunes,
	   larger fonts for titles, and larger music symbols.  By default, 
	   the layout squeezes the tunes to reduce the number of pages.

   -s xxx  scales the music output by factor xxx.

   -w www  sets the width of the staff to www points.

   -m mmm  sets the left margin to mmm points.

   -g shrink|space|stretch|fill   sets the "glue mode".
	   The default mode is fill, which fills the staff.
	   This flag is useful when changing the layout parameters, 
	   to see what effect the changes have for each mode separately.

   -B n    format with n bars on every staff

   -b	   forces a staff break at the end of each line, even if
	   the line has the continuation symbol \ at the end.

   -c	   append the continuation symbol to all music lines, 
	   which amounts to automatic line breaking.

   -a x    set the maximal allowed shrinkage to x, where x lies
	   between 0.0 and 1.0

   -j nn  Number the measures every nn bars or on the left side of
	  the staff when 0.


----- On-line help  -----

Flags for on-line help:

   -h      quick help, equivalent to "abc2ps" without any arguments.
           This also shows the default settings for some parameters.

   -v n    sets the verbosity for output to the screen to n.
           Hereby -v0 gives very little, -v1,v2,v3.. show successively 
           more information. Verbosity >= 10 is for debugging.

   -V      shows the version number.

   
----- Examples -----

These examples assume that wildcards '*' in the argument list
are automatically expanded out by the operating system, as 
happens e.g. under the shell under Unix. If not, the input files 
should be specified explicitly, that is:
   abc2ps x1.abc x2.abc x3.abc  instead of  abc2ps x*.abc

To typeset all tunes in 'mytunes.abc':

   abc mytunes.abc

To typeset all tunes, choosing all line breaks automatically:

   abc mytunes.abc -c

To do the same, but squeeze notes together more:

   abc mytunes.abc -c -a0.9


----- Differences to abc2mtex ------

Essentially, all features described in the abc2mtex userguide 
should work. The are a few exceptions:

   -  The slur denotation S was replaced by the syntax (...) 
      (see below)

   -  Key signatures HP and Hp probably aren't treated 
      in exactly the right way.

   -  There is no automatic beam checking.

   -  There is no way to automatically transpose music in this version.

   -  Filtering and interactive mode (abcm2ps)

----- Some extra features --- -----

For examples, see file sample.abc.

   -  Codes for decorations: including the ones defined in the
      standard abc syntax, the following decorations are interpreted:
         .   dot, staccato
         H   hold sign (fermata)
         u   up-bow
         v   down-bow
      The non standard ones are:
         ~   turn
         J   slide
         R   roll 
      When the flag '-u' is set, the decorations are those defined by
      abc2ps. The differences are:
         M   bar (M='em-phasis' = tenuto)


   -  Escape sequences: embedding a string between square brackets ([])
      in a music line delimits an escape sequence. In the present version,
      these are treated as information fields. This makes it easy to 
      change key, meter, or default length within a line (see sample.abc). 


   -  N-tuplets: abc2ps can handle general n-tuplet cases using the syntax
      
         (p:q:r abcd ..

      This means "put p notes into the time of q for the next r notes."
      If q is not given, it defaults as described in the abc2mtex
      user guide. If r is not given, it defaults to p. For example:

         (3::2 = (3:2:2  ;  (3 = (3:2:3 

      The number written over the n-plet is p. This generalized
      syntax is compatible with the older usage. Actually, q is not used 
      at all here; it is only relevant for programs which play the music.
      

   -  Chords: The program accepts only the square brackets notation:

          [ace][adf] 

      (the old notation +...+ is no more supported).

      The abc notation formally permits notes with different durations 
      on the same stem: [a/bc2] and so on. This program assigns all
      notes in a chord the duration of the first note in the bracket.
   
      A chord with two identical notes makes a union (one head
      with stems going both up and down), eg: [AA].
   

   -  Slurs and ties: in place of the syntax "SabcSd" for a slur 
      over notes abcd, this program uses the notation

          (abcd) 
   
      for a slur over the notes abcd. It permits cases such as

          (ab(cd))  and  ((ab)cd)  and  (a(bc)d) 

      and similar slurs-below-slurs. To connect three or four notes 
      by ties (e.g., for a note held over several bars) use

          (a(b)c)  or by ties   a-b-c

      The rule is that any note alone within brackets like (b) 
      terminates a previous slur and at the same time starts a new one.

      Note that the slur syntax (..) does not interfere with the (3abc 
      style for n-tuplets. If a bracket '(' is followed by a digit k, 
      it is interpreted as the start of a k-tuplet, otherwise it is the 
      start of a slur. For example, a slur is put over the last two 
      triplets in this line: (3abc ((3cde) ((3efg).

      An unbalanced parenthesis ')' or '(' indicates the continuation
      of a slur on a neighboring line. This is needed (for example)
      in order to make automatic line breaking possible. It will also
      lead to unexpected strange-looking additional slurs if the input
      file contains the wrong syntax (3abc) instead of (3abc for triplets.


   -  Bars: The following symbols denote fat double bars 
      at the start or end of a piece (without repeat dots). 
      Namely: [| for thick-thin, |] for thin-thick.
   
      For better results when using automatic line breaking, the program 
      will split up some types of bars when these are at the end of a line, 
      for example:
        ::  becomes :|  together with |: on the next line 
        |:  becomes |   together with |: on the next line
        :|2 becomes :|  together with [2 on the next line etc.


----- Customization -----

1. First of all, the horizontal layout of the notes can be changed 
extensively. This is described in 'layout.txt'.

2. Then there are a number of macros in the file abc2ps.h
which determine the page layout, ie:

   PAGEHEIGHT	height of paper
   STAFFWIDTH	usable width of paper
   LEFTMARGIN	left/right margin

By default, the paper size is the european A4 format. You may change
this default to the US letter format defining the cpp variable US_LETTER
in the Makefile.

The flags -w and -m change the staff width and the left margin,
respectively.

Other parameters may be put in a format file. The file 'fonts.fmt' is
always read in the current directory. Additional formats may be defined
using the flag '-F' and also having input files with extension '.fmt'.
To know all the settable parameters, call abcm2ps with the '-H' flag.


3. The behavior for underfull lines can be chosen (see "Line breaks").
   Also consider these two parameters:

   BETA_C   maximal expansion for flag -c.
   ALFA_X   maximal compression allowed before considering a staff
            overfull.
   BETA_X   maximal expansion allowed before considering a staff
            underfull.

Thus, setting BETA_X to 100.0 lets lines be stretched to any 
arbitrary amount quietly.


4. Parameters which influence the musical symbols (all dimensions 
are in pt, relative to a fundamental spacing between staff lines of 6pt):

   LSCALE0       Overall scale factor. The "internal" height for the
                 staff is 24 pt, that is, 6 pt between the lines. This 
                 is rather big, so LSCALE0 scales the size down.
   BASEWIDTH     Width of lines within music (bars, stems etc).
   SLURWIDTH     Width of Bezier curves when drawing slurs.
   STEM_YOFF     Offset of stem from note head center, y direction
   STEM_XOFF     Offset of stem from note head center, x direction
   STEM          Standard stem length for single notes.
   STEM_MIN      Minimal stem length when drawing beams.
   STEM_CH       Standard stem length for chords.
   STEM_CH_MIN   Minimal stem length for chords under beams.
   BEAM_DEPTH    Width of the horizontal stroke for beams.
   BEAM_SHIFT    How far the second, third beams are shifted up or down.
   BEAM_FLATFAC  Long beams are drawn with slope reduced by this factor.
   BEAM_THRESH   If the slope of a beam lies below this threshold, 
                 it is drawn with slope zero.
   MAX_SLOPE     Upper limit for the slope of a beam.
   DOTSHIFT      Extra shift, to avoid putting the dot into the flag
                 on some notes.
   GSTEM         Grace note stem length.
   GSTEM_XOFF    Offset of grace note stem to head center.
   GSPACE0       Space between grace note and main note.
   GSPACE        Space between grace notes.


----  Feedback -------

Any suggestions for improvement or bug reports are welcome.

The original document was written by:
	Michael Methfessel (msm@ihp-ffo.de), June 1996.
